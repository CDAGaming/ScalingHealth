buildscript {
    repositories {
        maven { url = 'https://files.minecraftforge.net/maven' }
        jcenter()
        mavenCentral()
    }
    dependencies {
        classpath group: 'net.minecraftforge.gradle', name: 'ForgeGradle', version: '3.+', changing: true
    }
}

plugins {
    id 'io.franzbecker.gradle-lombok' version '2.0'
    id 'maven'
    id 'maven-publish'
    id "com.jfrog.bintray" version "1.8.4"
    id "com.matthewprenger.cursegradle" version "1.4.0"
}

apply plugin: 'net.minecraftforge.gradle'
apply plugin: 'eclipse'

repositories {
    flatDir {
        name "fileRepo"
        dirs "repo"
    }
    mavenLocal()
    jcenter()
}

tasks.withType(JavaCompile) {
    options.encoding = 'UTF-8'
    options.compilerArgs = ['-Xlint:deprecation']
}

javadoc {
    failOnError = false
}

archivesBaseName = project.archivesBaseName
def versionInfo = getModVersion()
System.out.println(versionInfo)
version = "${versionInfo['version']}"
def version_short = "${versionInfo['version_short']}"

sourceCompatibility = targetCompatibility = compileJava.sourceCompatibility = compileJava.targetCompatibility = '1.8' // Need this here so eclipse task generates correctly.

minecraft {
    mappings channel: project.mcp_channel.toString(), version: project.mcp_mappings.toString()

    runs {
        client = {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        server = {
            properties 'forge.logging.markers': 'SCAN,REGISTRIES,REGISTRYDUMP'
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath
            source sourceSets.main
        }
        data = {
            properties 'forge.logging.console.level': 'debug'
            workingDirectory project.file('run').canonicalPath

            args '--mod', 'scalinghealth', 'all', 'output', file ('src/generated/resources')

            source sourceSets.main
        }
    }
}

repositories {
    jcenter()
    mavenLocal()
    maven {
        url  "https://dl.bintray.com/silentchaos512/silent-lib"
    }
    maven {
        url  "https://dl.bintray.com/silentchaos512/silent-utils"
    }
    maven { url 'https://maven.mcmoddev.com' }
    maven {
        // location of the maven that hosts JEI files
        name = "Progwml6 maven"
        url = "https://dvs1.progwml6.com/files/maven/"
    }
    maven {
        // location of a maven mirror for JEI files, as a fallback
        name = "ModMaven"
        url = "https://modmaven.k-4u.nl"
    }
}

configurations {
    // Dependencies to pack into the jar
    extraLibs
}

dependencies {
    minecraft "net.minecraftforge:forge:${project.forge_version}"

    extraLibs "com.udojava:EvalEx:2.1"
    compile("net.silentchaos512:silent-lib-${project.mc_version}:${project.sl_version}") {
        exclude module: "forge"
        exclude module: "jei-${project.mc_version}"
    }

    // JEI
    // compile against the JEI API but do not include it at runtime
    compileOnly fg.deobf("mezz.jei:jei-${project.mc_version}:${project.jei_version}:api")
    // at runtime, use the full JEI jar
    runtimeOnly fg.deobf("mezz.jei:jei-${project.mc_version}:${project.jei_version}")

    configurations.implementation.extendsFrom(configurations.extraLibs)
}

jar {
    appendix = "${project.mc_version}"
    manifest {
        attributes(["Specification-Title": project.mod_id,
                    "Specification-Vendor": "SilentChaos512",
                    "Specification-Version": "25.0", // We are version 1 of the modlauncher specification
                    "Implementation-Title": project.name,
                    "Implementation-Version": "${version}",
                    "Implementation-Vendor" :"SilentChaos512",
                    "Implementation-Timestamp": new Date().format("yyyy-MM-dd'T'HH:mm:ssZ")],)
    }
    from {
        configurations.extraLibs.collect { it.isDirectory() ? it : zipTree(it) }
    }
}

task deobfJar(type: Jar) {
    appendix = "${project.mc_version}"
    classifier = 'deobf'
    from sourceSets.main.output
}

task sourcesJar(type: Jar) {
    appendix = "${project.mc_version}"
    classifier = 'sources'
    from sourceSets.main.allJava
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    appendix = "${project.mc_version}"
    classifier = 'javadoc'
    from javadoc.getDestinationDir()
}

artifacts {
    if (project.hasProperty('doDeobfJar')) {
        archives deobfJar
    }
    if (project.hasProperty('doSourceJar')) {
        archives sourcesJar
    }
    if (project.hasProperty('doJavadocJar')) {
        archives javadocJar
    }
}

class Secrets {
    def data = null
    def getProperty(String key) {
        return data ? data[key] : ''
    }
}

import groovy.json.JsonSlurper

def secretFile = file 'secret.json'

project.ext.secret = new Secrets()
if (secretFile.exists()) {
    secretFile.withReader {
        project.ext.secret.data = new JsonSlurper().parse it
    }
}

curseforge {
    if (project.hasProperty('cf_project_id') && project.hasProperty('cf_release_type') && project.hasProperty('cf_changelog_filename') &&
            ((project.cf_release_type == 'alpha') || (project.cf_release_type == 'beta') || (project.cf_release_type == 'release'))) {
        apiKey = secret.curseforgeAPIKey
        project {
            id = project.cf_project_id
            changelog = file(project.cf_changelog_filename)
            changelogType = 'markdown'
            releaseType = project.cf_release_type
            addGameVersion(project.mc_version)
            mainArtifact(jar) {
                relations {
                    requiredDependency 'silent-lib'
                }
            }
        }
        options {
            debug = true
        }
    }
    else {
        System.out.println("The gradle.properties file is incorrect for cursegradle")
    }
}

//commit stuff
// remove old tag -> stage files -> commit files -> add tag back (modified or not)
task commitMinor {
    doFirst {
        int minor = Integer.parseInt(versionInfo['build.minor.number'].toString())
        minor++
        def newVersion = versionInfo['build.major.number'] + "." + minor.toString() + ".0"

        "git tag -d ${version_short.toString()}".execute()
        def add = "git add *".execute()
        if(!add.waitFor()) {
            def commit = "git commit -m \"Minor version change\"".execute()
            if (!commit.waitFor()) {
                "git tag -a ${newVersion} -m \"VersionInfo\"".execute()
            }
        }
    }
}

task commitStandard {
    doFirst {
        int revision = Integer.parseInt(versionInfo['build.revision.number'].toString())
        revision++
        def newVersion = versionInfo['version_simple'] + "." + revision.toString()

        "git tag -d ${version_short.toString()}".execute()
        def add = "git add *".execute()

        if(!add.waitFor()) {
            def commit = "git commit -m \"Revision\"".execute()
            if (!commit.waitFor()) {
                "git tag -a ${newVersion} -m \"VersionInfo\"".execute()
            }
        }
    }
}

task commitWithoutUpdatingTag {
    doFirst {
        "git tag -d ${version_short.toString()}".execute()
        def add = "git add *".execute()
        if(!add.waitFor()) {
            def commit = "git commit -m \"Auto generated commit!\"".execute()
            if (!commit.waitFor()) {
                "git tag -a ${version_short.toString()} -m \"Version Info\"".execute()
            }
        }
    }
}

// Version stuff
def getModVersion() {
    return getGitVersion()
}

def getGitVersion() {
    // Call git command
    def proc = "git describe --long".execute();
    proc.waitFor();
    def fullVersion = proc.text.trim();

    def matcher = fullVersion =~ /(\d+).(\d+).(\d+)-(.*)/

    def maj = matcher[0][1]
    def min = matcher[0][2]
    def rev = matcher[0][3]
    def bn = getBuildNumber()

    return makeVersionMap(maj, min, rev, bn, matcher[0][4])
}

static def makeVersionMap(maj, min, rev, bn, githash) {
    def out = [:]
    out['build.major.number'] = maj.toString()
    out['build.minor.number'] = min.toString()
    out['build.revision.number'] = rev.toString()
    out['build.githash'] = githash
    out['build.number'] = bn.toString()
    out['version_simple'] = "${maj}.${min}".toString()
    out['version_short'] = "${maj}.${min}.${rev}".toString()
    out['version'] = "${maj}.${min}.${rev}+${bn}".toString()
    return out
}

String getBuildNumber() {
    def versionFile = file('version.properties')
    if (versionFile.canRead()) {
        Properties versionProps = new Properties()
        versionProps.load(new FileInputStream(versionFile))
        return versionProps['build_number'].toString()
    }
    return "1"
}

task incrementBuild {
    doFirst {
        def versionFile = file('version.properties')
        if (versionFile.canRead()) {
            Properties versionProps = new Properties()
            versionProps.load(new FileInputStream(versionFile))
            def num = versionProps['build_number'].toInteger() + 1
            println("Incrementing BuildNumber to: " + num)
            versionProps['build_number'] = num.toString()
            versionProps.store(versionFile.newWriter(), null)
        } else {
            println("version.properties file not found! Ignoring.")
        }
    }
}

build.finalizedBy incrementBuild // only increment on successful builds

import groovy.json.JsonOutput

def writeUpdateJson() {
    def version = getModVersion()['version_short']
    def slurper = new JsonSlurper()
    def file = new File('update.json')
    def json = slurper.parse(file)

    if (!json[project.mc_version].containsKey(version.toString()))
        json[project.mc_version][version.toString()] = project.changelogUrl
    json[project.mc_version] = json[project.mc_version].sort([compare: {a, b -> b.compareTo(a)}] as Comparator)
    json['promos']["${project.mc_version}-latest"] = version

    println(json)
    file.write(JsonOutput.prettyPrint(JsonOutput.toJson(json)))
}

task createUpdateJson {
    doLast {
        println('Updating update.json...')
        writeUpdateJson()
    }
}
build.finalizedBy createUpdateJson